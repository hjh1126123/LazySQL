<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#@ include file="MultipleOutputHelper.ttinclude" #> 

<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	var conn = new SqlConnection("Data Source=120.24.80.151;Initial Catalog=hdb21;Persist Security Info=True;User ID=sahdb;Password=www.baidu.com;MultipleActiveResultSets=true");
#>
<# 	
	
	var dicts = DBHelper.Instance.Init(conn);
	foreach(var key in dicts.Keys){
	 manager.StartNewFile(key + ".cs");
#>
using System;
namespace LazySQL.Model
{
	public class <#= key #>
	{
<# 
	 var count = 0;
	 foreach(var field in dicts[key]){
		 count++;
		 string[] field_Info = field.Split(':');
		 string field_Type = string.Empty;
		 switch(field_Info[1].ToLower()){
			 case "char":
			 case "text":
			 case "varchar":
			 case "nchar":
			 case "ntext":
			 case "nvarchar":
				 field_Type = "string";
				 break;
			 
			 case "smallint":
			 case "int":
			 case "bigint":
				 field_Type = "int";
				 break;

			 case "float":
				 field_Type = "Double";
				 break;

			 case "real":
				 field_Type = "Single";
				 break;

			 case "smallmoney":
			 case "money":
			 case "numeric":
			 case "decimal":
				 field_Type = "Decimal";
				 break;

			 case "binary":
			 case "varbinary":
			 case "image":
				 field_Type = "Byte[]";
				 break;

			 case "smalldatetime":
			 case "datetime":
			 case "timestamp":
			 case "date":
				 field_Type = "DateTime";
				 break;

			 case "bit":
				 field_Type = "bool";
				 break;
		 }
		 string field_Name = Regex.Replace(field_Info[0], @"\d", "").Replace();
		 field_Name = Regex.Replace(field_Name,"[~!-@#$%^&*()=+[//]{}'/";:/?.,><`|！·￥…—（）//-、；：。，》《]", "").ToUpper();
		 if(String.IsNullOrWhiteSpace(field_Name)){
			field_Name = "error_" + count;
		 }
#>
		public <#= field_Type #> <#= field_Name #> { get; set; }
<# } #>
	}
}
<#
	 manager.EndBlock();
	}
	conn.Dispose();
	manager.Process(true);
#>
